# fault

> Helping Engineers and AI-agents cooperate to build reliable applications

Build Like You Have a Full Team: Get AI-powered review hints on reliability, performance and best practices.
Ground Your Deliveries: Automate SLO-validated scenarios with zero config - preview your feature under fault in seconds.
Replay Incidents with Ease: Swiftly understand how your application reacts by exploring production flakiness locally.

**Examples**

Scramble a LLM prompt by injecting a system prompt:
```bash
fault run llm openai --case prompt-scramble --instruction "Respond as a pirate. Arr"
```

Introduce latency to all calls made through the fault proxy to any hosts:
```bash
fault run --with-latency --latency-mean 300 --upstream '*'
```

Generate a test scenario for a given, OpenAPI specification:
```bash
fault scenario generate --scenario scenario.yaml --spec-url http://example.com/openapi.json
```

Run a scenario:
```bash
fault scenario run --scenario scenario.yaml
```

Generate a deep analysis of scenario results with a SRE feel:
```bash
fault agent scenario-review --results results.json
```

Run fault as a MCP server:
```bash
fault agent tool
```

## Explanations

- [Understanding Fault Injection - Purpose and Use in Reliability Engineering - fault](https://fault-project.com/explanations/fault-injection-basics/): Understanding Fault Injection - Purpose and Use in Reliability Engineering
- [My Technical Journey Through fault - fault](https://fault-project.com/explanations/technical-journey/): My Technical Journey Through fault
- [Understanding eBPF and its Context In Reliability Engineering - fault](https://fault-project.com/explanations/understanding-ebpf/): Understanding eBPF and its Context In Reliability Engineering
- [Why fault? - fault](https://fault-project.com/explanations/why-fault/): Why fault?

## How-to

- [Install the fault CLI - fault](https://fault-project.com/how-to/install/): Install the fault CLI
- [Run with Chaos Toolkit - fault](https://fault-project.com/how-to/run-with-chaostoolkit/): Run with Chaos Toolkit
- [Run with the Reliably Platform - fault](https://fault-project.com/how-to/run-with-reliably/): Run with the Reliably Platform
- [Agent Code Review - fault](https://fault-project.com/how-to/agent/code-suggestions/): Agent Code Review
- [Configure the agent's LLM Provider - fault](https://fault-project.com/how-to/agent/llm-configuration/): Configure the agent's LLM Provider
- [Configure the agent's MCP Agent Server - fault](https://fault-project.com/how-to/agent/mcp-server-configuration/): Configure the agent's MCP Agent Server
- [Explore the agent's MCP Agent Tools - fault](https://fault-project.com/how-to/agent/mcp-tools/): Explore the agent's MCP Agent Tools
- [Platform Reliability & Performance Analysis - fault](https://fault-project.com/how-to/agent/platform-advices/): Analyze your platform resources from a reliability & performance posture
- [Scenario Reliability & Performance Analysis - fault](https://fault-project.com/how-to/agent/report-advices/): Analyze scenario results from a reliability & performance posture
- [Execute Scenarios From GitHub Action - fault](https://fault-project.com/how-to/ci/github/): Execute Scenarios From GitHub Action
- [Fault Injection Into AWS - fault](https://fault-project.com/how-to/inject/aws/): Fault Injection Into AWS ECS
- [Fault Injection Into Google Cloud Platform - fault](https://fault-project.com/how-to/inject/gcp/): Fault Injection Into Google Cloud Platform Cloud Run
- [Fault Injection Into Kubernetes - fault](https://fault-project.com/how-to/inject/kubernetes/): Fault Injection Into Kubernetes Service & Deployment
- [Platform Fault Injection - fault](https://fault-project.com/how-to/inject/overview/): Platform Fault Injection Overview
- [Enable Observability - fault](https://fault-project.com/how-to/observability/traces/): Enable Observability via Open Telemetry
- [Deploy Into an Application Running on Kubernetes - fault](https://fault-project.com/how-to/platform/run-on-kubernetes/): Deploy Into an Application Running on Kubernetes
- [Run on Microsoft Windows - fault](https://fault-project.com/how-to/platform/run-on-windows/): Run on Microsoft Windows
- [Run as a Docker Container - fault](https://fault-project.com/how-to/platform/run-with-docker/): Run as a Docker Container
- [Understand the Proxy Lifecycle - fault](https://fault-project.com/how-to/proxy/lifecycle/): Understand the Proxy Lifecycle
- [Configure the TUI - fault](https://fault-project.com/how-to/proxy/tui/): Configure the TUI
- [Inject Bandwidth Network Fault - fault](https://fault-project.com/how-to/proxy/faults/configure-bandwidth/): Inject Bandwidth Network Fault
- [Inject Blackhole Network Fault - fault](https://fault-project.com/how-to/proxy/faults/configure-blackhole/): Inject Blackhole Network Fault
- [Inject HTTP Errors - fault](https://fault-project.com/how-to/proxy/faults/configure-http-error/): Inject HTTP Errors
- [Inject Jitter Network Fault - fault](https://fault-project.com/how-to/proxy/faults/configure-jitter/): Inject Jitter Network Fault
- [Inject Latency Network Fault - fault](https://fault-project.com/how-to/proxy/faults/configure-latency/): Inject Latency Network Fault
- [Inject Faults Into LLM API Calls - fault](https://fault-project.com/how-to/proxy/faults/configure-llm/): Inject Faults Into LLM API Calls
- [Inject Packet Loss Network Fault - fault](https://fault-project.com/how-to/proxy/faults/configure-packet-loss/): Inject BaPacket Lossdwidth Network Fault
- [Extend with gRPC plugins - fault](https://fault-project.com/how-to/proxy/faults/extending/): Extend with gRPC plugins
- [Simulate Network Faults On Any TCP-based Traffic - fault](https://fault-project.com/how-to/proxy/protocols/tcp/): Simulate Network Faults On Any TCP-based Traffic
- [Intercept Network Traffic Transparently - fault](https://fault-project.com/how-to/proxy/stealth/configure-stealth-mode/): Intercept Network Traffic Transparently with eBPF
- [Generate Automated Reliability Testing Scenarios - fault](https://fault-project.com/how-to/scenarios/generate/): Generate Automated Reliability Testing Scenarios
- [Generate Automated Reliability & Performance Reports - fault](https://fault-project.com/how-to/scenarios/reporting/): Generate Automated Reliability & Performance Reports
- [Run Reliability Testing Scenarios - fault](https://fault-project.com/how-to/scenarios/run/): Run Reliability Testing Scenarios

## Reference

- [Builtin Faults - fault](https://fault-project.com/reference/builtin-faults/): Helping Engineers and AI-agents cooperate to build reliable applications
- [CLI Commands - fault](https://fault-project.com/reference/cli-commands/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Environment Variables - fault](https://fault-project.com/reference/environment-variables/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Platform Injection - fault](https://fault-project.com/reference/injection/): Helping Engineers and AI-agents cooperate to build reliable applications
- [TCP Proxy Mapping - fault](https://fault-project.com/reference/proxy-mapping-syntax/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Scenario File Format - fault](https://fault-project.com/reference/scenario-file-format/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Scheduling Intervals - fault](https://fault-project.com/reference/schedule-intervals-syntax/): Helping Engineers and AI-agents cooperate to build reliable applications

## Tutorials

- [Creating a Reliability Testing Scenario Tutorial - fault](https://fault-project.com/tutorials/create-scenario/): Creating a Reliability Testing Scenario Tutorial
- [Getting Started Tutorial - fault](https://fault-project.com/tutorials/getting-started/): Getting Started Tutorial
- [Basic Install Steps - fault](https://fault-project.com/tutorials/install/): Basic Install Steps
- [tldr of fault - fault](https://fault-project.com/tutorials/tldr/): tldr of fault


# fault

> fault is an Open-Source Rust-powered CLI and AI-MCP server that lets engineers and AI agents team up to ship production-ready code. 

- [Homepage](https://fault-project.com/)
- [Repository](https://github.com/fault-project/fault-cli)

- Build Like You Have a Full Team: Get AI-powered review hints on reliability, performance and best practices.
- Ground Your Deliveries: Automate SLO-validated scenarios with zero config - preview your feature under fault in seconds.
- Replay Incidents with Ease: Swiftly understand how your application reacts by exploring production flakiness locally.

## Explanations

- [Fault Injection Basics - fault](https://fault-project.com/explanations/fault-injection-basics/): Understanding Fault Injection: Purpose and Use in Reliability Engineering
- [Technical Journey - fault](https://fault-project.com/explanations/technical-journey/): My Technical Journey Through fault
- [Understanding eBPF - fault](https://fault-project.com/explanations/understanding-ebpf/): Understanding eBPF and its Context In Reliability Engineering
- [Why fault? - fault](https://fault-project.com/explanations/why-fault/): Why fault?

## How-to

- [Installing the fault cli - fault](https://fault-project.com/how-to/install/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Chaos Toolkit - fault](https://fault-project.com/how-to/run-with-chaostoolkit/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Reliably - fault](https://fault-project.com/how-to/run-with-reliably/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Code Review & Suggestions - fault](https://fault-project.com/how-to/agent/code-suggestions/): Helping Engineers and AI-agents cooperate to build reliable applications
- [LLM Configuration - fault](https://fault-project.com/how-to/agent/llm-configuration/): Helping Engineers and AI-agents cooperate to build reliable applications
- [MCP Server Configuration - fault](https://fault-project.com/how-to/agent/mcp-server-configuration/): Helping Engineers and AI-agents cooperate to build reliable applications
- [MCP Tools - fault](https://fault-project.com/how-to/agent/mcp-tools/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Platform Analysis - fault](https://fault-project.com/how-to/agent/platform-advices/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Scenario Analysis - fault](https://fault-project.com/how-to/agent/report-advices/): Helping Engineers and AI-agents cooperate to build reliable applications
- [GitHub Action - fault](https://fault-project.com/how-to/ci/github/): Helping Engineers and AI-agents cooperate to build reliable applications
- [AWS - fault](https://fault-project.com/how-to/inject/aws/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Google Cloud Platform - fault](https://fault-project.com/how-to/inject/gcp/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Kubernetes - fault](https://fault-project.com/how-to/inject/kubernetes/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Overview - fault](https://fault-project.com/how-to/inject/overview/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Open Telemetry - fault](https://fault-project.com/how-to/observability/traces/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Kubernetes - fault](https://fault-project.com/how-to/platform/run-on-kubernetes/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Windows - fault](https://fault-project.com/how-to/platform/run-on-windows/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Docker - fault](https://fault-project.com/how-to/platform/run-with-docker/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Lifecycle - fault](https://fault-project.com/how-to/proxy/lifecycle/): Helping Engineers and AI-agents cooperate to build reliable applications
- [TUI - fault](https://fault-project.com/how-to/proxy/tui/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Bandwidth - fault](https://fault-project.com/how-to/proxy/faults/configure-bandwidth/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Blackhole - fault](https://fault-project.com/how-to/proxy/faults/configure-blackhole/): Helping Engineers and AI-agents cooperate to build reliable applications
- [HTTP Error - fault](https://fault-project.com/how-to/proxy/faults/configure-http-error/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Jitter - fault](https://fault-project.com/how-to/proxy/faults/configure-jitter/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Latency - fault](https://fault-project.com/how-to/proxy/faults/configure-latency/): Helping Engineers and AI-agents cooperate to build reliable applications
- [LLM - fault](https://fault-project.com/how-to/proxy/faults/configure-llm/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Packet Loss - fault](https://fault-project.com/how-to/proxy/faults/configure-packet-loss/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Extend fault - fault](https://fault-project.com/how-to/proxy/faults/extending/): Helping Engineers and AI-agents cooperate to build reliable applications
- [TCP Proxies - fault](https://fault-project.com/how-to/proxy/protocols/tcp/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Stealth Mode (eBPF) - fault](https://fault-project.com/how-to/proxy/stealth/configure-stealth-mode/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Generate - fault](https://fault-project.com/how-to/scenarios/generate/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Report - fault](https://fault-project.com/how-to/scenarios/reporting/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Run - fault](https://fault-project.com/how-to/scenarios/run/): Helping Engineers and AI-agents cooperate to build reliable applications

## Reference

- [Builtin Faults - fault](https://fault-project.com/reference/builtin-faults/): Helping Engineers and AI-agents cooperate to build reliable applications
- [CLI Commands - fault](https://fault-project.com/reference/cli-commands/): CLI Reference
- [Environment Variables - fault](https://fault-project.com/reference/environment-variables/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Platform Injection - fault](https://fault-project.com/reference/injection/): Injecting fault Into Your Platform
- [TCP Proxy Mapping - fault](https://fault-project.com/reference/proxy-mapping-syntax/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Scenario File Format - fault](https://fault-project.com/reference/scenario-file-format/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Scheduling Intervals - fault](https://fault-project.com/reference/schedule-intervals-syntax/): Helping Engineers and AI-agents cooperate to build reliable applications

## Tutorials

- [Creating Scenario - fault](https://fault-project.com/tutorials/create-scenario/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Getting Started with the Proxy - fault](https://fault-project.com/tutorials/getting-started/): Helping Engineers and AI-agents cooperate to build reliable applications
- [Install - fault](https://fault-project.com/tutorials/install/): Helping Engineers and AI-agents cooperate to build reliable applications
- [tl;dr - fault](https://fault-project.com/tutorials/tldr/): Helping Engineers and AI-agents cooperate to build reliable applications

